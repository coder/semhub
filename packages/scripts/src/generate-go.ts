import fs from "fs";
import path from "path";
import { z } from "zod";

import {
  lambdaErrorResponseSchema,
  lambdaSearchRequestSchema,
  lambdaSuccessResponseSchema,
} from "@/core/semsearch/lambda.schema";
import {
  RANKING_WEIGHTS,
  SCORE_MULTIPLIERS,
  TIME_CONSTANTS,
} from "@/core/semsearch/ranking";

// TODO: hook this up to build/CICD process

// Helper to convert Zod schema to Go struct
function zodToGoStruct(schema: z.ZodObject<any>, name: string): string {
  const fields = Object.entries(schema.shape).map(([key, value]) => {
    const fieldName = key.charAt(0).toUpperCase() + key.slice(1);
    let goType = "interface{}"; // default type

    if (value instanceof z.ZodString) {
      goType = "string";
    } else if (value instanceof z.ZodNumber) {
      goType = "float64";
    } else if (value instanceof z.ZodArray) {
      if (value.element instanceof z.ZodNumber) {
        goType = "[]float64";
      } else if (value.element instanceof z.ZodString) {
        goType = "[]string";
      }
    }

    const jsonTag =
      value instanceof z.ZodOptional
        ? `\`json:"${key},omitempty"\``
        : `\`json:"${key}"\``;

    return `\t${fieldName} ${goType} ${jsonTag}`;
  });

  return `type ${name} struct {
${fields.join("\n")}
}`;
}

// Generate Lambda types
const lambdaTypes = `// Code generated by packages/scripts/src/generate-go.ts. DO NOT EDIT.
package types

${zodToGoStruct(lambdaSearchRequestSchema, "SearchRequest")}

${zodToGoStruct(lambdaErrorResponseSchema, "ErrorResponse")}

${zodToGoStruct(lambdaSuccessResponseSchema, "SuccessResponse")}
`;

const lambdaTypesPath = path.join(
  __dirname,
  "../../../packages/search/pkg/types/dto_gen.go",
);
fs.writeFileSync(lambdaTypesPath, lambdaTypes);
// eslint-disable-next-line no-console
console.log("Generated Go Lambda DTOs at:", lambdaTypesPath);

// Generate ranking config
const rankingConfig = `// Code generated by packages/scripts/src/generate-go.ts. DO NOT EDIT.
package ranking

type RankingConfig struct {
	Weights struct {
		SemanticSimilarity float64
		CommentCount       float64
		Recency           float64
		IssueState        float64
	}
	TimeConstants struct {
		RecencyBaseDays int
	}
	ScoreMultipliers struct {
		OpenIssue   float64
		ClosedIssue float64
	}
}

var Config = RankingConfig{
	Weights: struct {
		SemanticSimilarity float64
		CommentCount       float64
		Recency           float64
		IssueState        float64
	}{
		SemanticSimilarity: ${RANKING_WEIGHTS.SEMANTIC_SIMILARITY},
		CommentCount:       ${RANKING_WEIGHTS.COMMENT_COUNT},
		Recency:           ${RANKING_WEIGHTS.RECENCY},
		IssueState:        ${RANKING_WEIGHTS.ISSUE_STATE},
	},
	TimeConstants: struct {
		RecencyBaseDays int
	}{
		RecencyBaseDays: ${TIME_CONSTANTS.RECENCY_BASE_DAYS},
	},
	ScoreMultipliers: struct {
		OpenIssue   float64
		ClosedIssue float64
	}{
		OpenIssue:   ${SCORE_MULTIPLIERS.OPEN_ISSUE},
		ClosedIssue: ${SCORE_MULTIPLIERS.CLOSED_ISSUE},
	},
}
`;

const rankingConfigPath = path.join(
  __dirname,
  "../../../packages/search/internal/ranking/config_gen.go",
);
fs.writeFileSync(rankingConfigPath, rankingConfig);
// eslint-disable-next-line no-console
console.log("Generated Go ranking config at:", rankingConfigPath);
